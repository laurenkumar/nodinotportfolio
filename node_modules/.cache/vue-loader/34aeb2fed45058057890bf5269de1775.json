{"remainingRequest":"/Users/uthaya/Downloads/tplh.net-2019-master 3/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/uthaya/Downloads/tplh.net-2019-master 3/src/App.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"/Users/uthaya/Downloads/tplh.net-2019-master 3/src/App.vue","mtime":1586526486427},{"path":"/Users/uthaya/Downloads/tplh.net-2019-master 3/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/uthaya/Downloads/tplh.net-2019-master 3/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/uthaya/Downloads/tplh.net-2019-master 3/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/uthaya/Downloads/tplh.net-2019-master 3/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/uthaya/Downloads/tplh.net-2019-master 3/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/uthaya/Downloads/tplh.net-2019-master 3/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCkBpbXBvcnQgJ0AvYXNzZXRzL3Njc3MvZm91bmRhdGlvbi9mb250LnNjc3MnOwoKQGltcG9ydCAnQC9hc3NldHMvc2Nzcy9mb3VuZGF0aW9uL25vcm1hbGl6ZS5zY3NzJzsKQGltcG9ydCAnQC9hc3NldHMvc2Nzcy9mb3VuZGF0aW9uL2dsb2JhbC5zY3NzJzsKQGltcG9ydCAnQC9hc3NldHMvc2Nzcy9mb3VuZGF0aW9uL2tleWZyYW1lcy5zY3NzJzsKQGltcG9ydCAnQC9hc3NldHMvc2Nzcy9vYmplY3QvcHJvamVjdC92aWV3LXdyYXAuc2Nzcyc7Cg=="},{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8LA;;AAEA;AACA;AACA;AACA","file":"App.vue","sourceRoot":"src","sourcesContent":["<script>\nimport * as THREE from 'three';\nimport sleep from 'js-util/sleep';\nimport debounce from 'js-util/debounce';\n\nimport GlobalTitle from '@/components/global/GlobalTitle.vue';\nimport UtilityNavi from '@/components/global/UtilityNavi.vue';\nimport WorksNavi from '@/components/global/WorksNavi.vue';\nimport Preloader from '@/components/global/Preloader.vue';\nimport Guide from '@/components/global/Guide.vue';\n\nexport default {\n  name: 'App',\n  metaInfo: {\n    title: '',\n    titleTemplate: '%sAxel Nodinot',\n    meta: [\n      {\n        name: 'description',\n        content: 'Je suis un journaliste. BousillÃ© de rap.'\n      }\n    ]\n  },\n  components: {\n    GlobalTitle,\n    UtilityNavi,\n    WorksNavi,\n    Preloader,\n    Guide\n  },\n  data() {\n    return {\n      vTouchStart: new THREE.Vector2(),\n      vTouchMoveStart: new THREE.Vector2(),\n      vTouchMove: new THREE.Vector2(),\n      isTouchMoving: false\n    };\n  },\n  async created() {\n    const { state, dispatch } = this.$store;\n\n    document.body.append(state.canvas);\n    state.canvas.style = `\n        position: absolute;\n        top: 0;\n        left: 0;\n      `;\n\n    // On global events.\n    window.addEventListener('resize', debounce(this.resize, 100));\n    window.addEventListener('mousemove', this.mousemove);\n    document.addEventListener('mouseleave', this.mouseleave);\n    document.addEventListener('touchstart', this.touchstart);\n    document.addEventListener('touchmove', this.touchmove);\n    document.addEventListener('touchend', this.touchend);\n\n    await sleep(500);\n    this.$store.commit('showPreloader');\n    this.update();\n    await dispatch('initWebGL');\n    state.webgl.start(state.canvas, this.$store);\n  },\n  computed: {\n    transitionName() {\n      return this.$store.state.isTransitionDescend === true\n        ? 'view'\n        : 'view-asc';\n    }\n  },\n  methods: {\n    update() {\n      const {\n        webgl,\n        preloadMax,\n        preloadProgress,\n        isLoaded\n      } = this.$store.state;\n      if (isLoaded === false) {\n        this.$store.commit('updatePreloadProgress');\n        if (preloadProgress / preloadMax > 0.999) {\n          this.loaded();\n        }\n      } else {\n        webgl.update();\n      }\n      requestAnimationFrame(this.update);\n    },\n    async loaded() {\n      this.resize();\n      this.$store.commit('loaded');\n      if (this.$route.name === 'home') {\n        await sleep(800);\n      } else {\n        await sleep(2400);\n      }\n      this.$store.state.webgl.play();\n      this.$store.commit('showView');\n    },\n    resize() {\n      const { canvas, resolution, webgl } = this.$store.state;\n\n      resolution.set(document.body.clientWidth, window.innerHeight);\n      canvas.width = resolution.x;\n      canvas.height = resolution.y;\n      this.$store.commit('changeMediaQuery', resolution.x < 768);\n      webgl.resize();\n    },\n    mousemove(e) {\n      if (\n        this.$store.state.isShownUI === false ||\n        this.$store.state.isEnabledTouch === true\n      ) {\n        return;\n      }\n\n      const { resolution, mouse, mousePrev, mouseForce } = this.$store.state;\n\n      if (mousePrev.length() !== 0) mousePrev.copy(mouse);\n      mouse.set(\n        (e.clientX / resolution.x) * 2 - 1,\n        -(e.clientY / resolution.y) * 2 + 1\n      );\n      if (mousePrev.length() === 0) mousePrev.copy(mouse);\n      mouseForce.copy(mouse.clone().sub(mousePrev));\n    },\n    mouseleave() {\n      const { mouse, mousePrev, mouseForce } = this.$store.state;\n\n      mouse.set(0, 0);\n      mousePrev.set(0, 0);\n      mouseForce.set(0, 0);\n    },\n    touchstart(e) {\n      const { commit } = this.$store;\n\n      commit('setEnabledTouch', true);\n      commit('startTouch');\n      this.vTouchStart.set(e.touches[0].clientX, e.touches[0].clientY);\n      this.vTouchMove.set(e.touches[0].clientX, e.touches[0].clientY);\n    },\n    touchmove(e) {\n      const { state, commit } = this.$store;\n\n      if (state.isTouchStarted === false) return;\n      this.vTouchMove.set(e.touches[0].clientX, e.touches[0].clientY);\n      if (state.isTouchMoving === false) {\n        // judge whether the touch is a swipe or a single tap.\n        if (\n          this.vTouchStart\n            .clone()\n            .sub(this.vTouchMove)\n            .length() > 3\n        ) {\n          this.vTouchMoveStart.set(e.touches[0].clientX, e.touches[0].clientY);\n          commit('startTouchMove');\n        }\n      } else {\n        // judge whether the swipe direction is X or Y.\n        commit('touchMove', {\n          x: this.vTouchMove.x - this.vTouchMoveStart.x,\n          y: this.vTouchMove.y - this.vTouchMoveStart.y\n        });\n      }\n    },\n    touchend() {\n      this.$store.commit('touchEnd');\n    }\n  }\n};\n</script>\n\n<template lang=\"pug\">\n  div\n    GlobalTitle\n    UtilityNavi\n    WorksNavi\n    main\n      transition(\n        :name = 'transitionName'\n        appear\n        v-if = '$store.state.isShowView === true'\n        )\n        router-view\n    Preloader\n    Guide(\n      v-if = 'false'\n      )\n</template>\n\n<style lang=\"scss\">\n@import '@/assets/scss/foundation/font.scss';\n\n@import '@/assets/scss/foundation/normalize.scss';\n@import '@/assets/scss/foundation/global.scss';\n@import '@/assets/scss/foundation/keyframes.scss';\n@import '@/assets/scss/object/project/view-wrap.scss';\n</style>\n"]}]}
{"remainingRequest":"/Users/uthaya/Downloads/tplh.net-2019-master 3/node_modules/thread-loader/dist/cjs.js!/Users/uthaya/Downloads/tplh.net-2019-master 3/node_modules/babel-loader/lib/index.js!/Users/uthaya/Downloads/tplh.net-2019-master 3/node_modules/babel-loader/lib/index.js??ref--14!/Users/uthaya/Downloads/tplh.net-2019-master 3/node_modules/eslint-loader/index.js??ref--12-0!/Users/uthaya/Downloads/tplh.net-2019-master 3/src/webgl/SkullPointsFirst.js","dependencies":[{"path":"/Users/uthaya/Downloads/tplh.net-2019-master 3/src/webgl/SkullPointsFirst.js","mtime":1586068672000},{"path":"/Users/uthaya/Downloads/tplh.net-2019-master 3/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/uthaya/Downloads/tplh.net-2019-master 3/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/uthaya/Downloads/tplh.net-2019-master 3/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/uthaya/Downloads/tplh.net-2019-master 3/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/uthaya/Downloads/tplh.net-2019-master 3/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/uthaya/Downloads/tplh.net-2019-master 3/src/webgl/SkullPointsFirst.js"],"names":["DURATION","DELAY_SHOW","DURATION_HIDE","NUM","SkullPointsFirst","THREE","Points","geometry","baPositions","baDelays","baStartY","i","ul","radian","MathEx","Math","radius","material","uniforms","time","type","value","duration","resolution","pixelRatio","PIXEL_RATIO","noiseTex","alpha","vertexShader","fragmentShader","transparent","blending","depthWrite","t","alphaHide","store"],"mappings":"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","sourcesContent":["import * as THREE from 'three';\nimport MathEx from 'js-util/MathEx';\n\nimport store from '@/store';\nimport vs from '@/webgl/glsl/SkullPointsFirst.vs';\nimport fs from '@/webgl/glsl/SkullPointsFirst.fs';\n\nimport PIXEL_RATIO from '@/const/PIXEL_RATIO';\n\nconst DURATION = 1.4;\nconst DELAY_SHOW = 2.75;\nconst DURATION_HIDE = 1;\nconst NUM = 800;\n\nexport default class SkullPointsFirst extends THREE.Points {\n  constructor() {\n    // Define Geometry\n    const geometry = new THREE.BufferGeometry();\n\n    // Define attributes of the geometry\n    const baPositions = new THREE.BufferAttribute(new Float32Array(NUM * 3), 3);\n    const baDelays = new THREE.BufferAttribute(new Float32Array(NUM), 1);\n    const baStartY = new THREE.BufferAttribute(new Float32Array(NUM), 1);\n    for (var i = 0, ul = NUM; i < ul; i++) {\n      const radian = MathEx.radians(Math.random() * 360);\n      const radius = Math.random() * 6 + 2;\n      baPositions.setXYZ(\n        i,\n        Math.cos(radian) * radius,\n        0,\n        Math.sin(radian) * radius\n      );\n      baDelays.setX(i, Math.random() * DURATION * 0.6 + DELAY_SHOW);\n      baStartY.setX(i, Math.random() * 10);\n    }\n    geometry.setAttribute('position', baPositions);\n    geometry.setAttribute('delay', baDelays);\n    geometry.setAttribute('startY', baStartY);\n\n    // Define Material\n    const material = new THREE.RawShaderMaterial({\n      uniforms: {\n        time: {\n          type: 'f',\n          value: 0\n        },\n        duration: {\n          type: 'f',\n          value: DURATION\n        },\n        resolution: {\n          type: 'v2',\n          value: new THREE.Vector2()\n        },\n        pixelRatio: {\n          type: 'f',\n          value: PIXEL_RATIO\n        },\n        noiseTex: {\n          type: 't',\n          value: null\n        },\n        alpha: {\n          type: 'f',\n          value: 0\n        }\n      },\n      vertexShader: vs,\n      fragmentShader: fs,\n      transparent: true,\n      blending: THREE.AdditiveBlending,\n      depthWrite: false\n    });\n\n    // Create Object3D\n    super(geometry, material);\n    this.name = 'SkullPointsFirst';\n    this.timeHide = 0;\n    this.isShown = false;\n    this.isHidden = false;\n  }\n  start(noiseTex) {\n    this.material.uniforms.noiseTex.value = noiseTex;\n  }\n  show() {\n    this.isShown = true;\n  }\n  hide() {\n    this.isHidden = this.isShown;\n  }\n  update(t) {\n    if (this.isShown === false) return;\n\n    const { time } = this.material.uniforms;\n\n    time.value += t;\n    this.rotation.set(0, time.value * 0.2, 0);\n\n    if (time.value >= DURATION * 1.8 + DELAY_SHOW) {\n      this.visible = false;\n    }\n\n    // calculation the hidding alpha.\n    if (this.isHidden === true) {\n      this.timeHide += time;\n    }\n    const alphaHide = MathEx.clamp(this.timeHide / DURATION_HIDE, 0.0, 1.0);\n    this.material.uniforms.alpha.value = 1.0 - alphaHide;\n  }\n  resize() {\n    const { resolution } = store.state;\n    this.material.uniforms.resolution.value.copy(resolution);\n  }\n}\n"]}]}
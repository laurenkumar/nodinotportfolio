{"remainingRequest":"/Users/uthaya/Downloads/tplh.net-2019-master 3/node_modules/thread-loader/dist/cjs.js!/Users/uthaya/Downloads/tplh.net-2019-master 3/node_modules/babel-loader/lib/index.js!/Users/uthaya/Downloads/tplh.net-2019-master 3/node_modules/babel-loader/lib/index.js??ref--14!/Users/uthaya/Downloads/tplh.net-2019-master 3/node_modules/eslint-loader/index.js??ref--12-0!/Users/uthaya/Downloads/tplh.net-2019-master 3/src/webgl/SkullBody.js","dependencies":[{"path":"/Users/uthaya/Downloads/tplh.net-2019-master 3/src/webgl/SkullBody.js","mtime":1586068672000},{"path":"/Users/uthaya/Downloads/tplh.net-2019-master 3/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/uthaya/Downloads/tplh.net-2019-master 3/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/uthaya/Downloads/tplh.net-2019-master 3/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/uthaya/Downloads/tplh.net-2019-master 3/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/uthaya/Downloads/tplh.net-2019-master 3/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuZnVuY3Rpb24ubmFtZSI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5zdWIiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5mdW5jdGlvbi5uYW1lIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnN1YiI7CmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAiL1VzZXJzL3V0aGF5YS9Eb3dubG9hZHMvdHBsaC5uZXQtMjAxOS1tYXN0ZXIgMy9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY2xhc3NDYWxsQ2hlY2siOwppbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gIi9Vc2Vycy91dGhheWEvRG93bmxvYWRzL3RwbGgubmV0LTIwMTktbWFzdGVyIDMvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzIjsKaW1wb3J0IF9pbmhlcml0cyBmcm9tICIvVXNlcnMvdXRoYXlhL0Rvd25sb2Fkcy90cGxoLm5ldC0yMDE5LW1hc3RlciAzL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0cyI7CmltcG9ydCBfY3JlYXRlU3VwZXIgZnJvbSAiL1VzZXJzL3V0aGF5YS9Eb3dubG9hZHMvdHBsaC5uZXQtMjAxOS1tYXN0ZXIgMy9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlU3VwZXIiOwppbXBvcnQgKiBhcyBUSFJFRSBmcm9tICd0aHJlZSc7CmltcG9ydCB7IGVhc2VPdXRDaXJjLCBlYXNlSW5PdXRDdWJpYyB9IGZyb20gJ2Vhc2luZy1qcyc7CmltcG9ydCBNYXRoRXggZnJvbSAnanMtdXRpbC9NYXRoRXgnOwppbXBvcnQgdnMgZnJvbSAnQC93ZWJnbC9nbHNsL1NrdWxsQm9keS52cyc7CmltcG9ydCBmcyBmcm9tICdAL3dlYmdsL2dsc2wvU2t1bGxCb2R5LmZzJzsKdmFyIERVUkFUSU9OX1NIT1cgPSA1Owp2YXIgREVMQVlfU0hPVyA9IDE7CnZhciBEVVJBVElPTl9ISURFID0gMS4yOwp2YXIgREVMQVlfSElERSA9IDAuNDsKdmFyIERVUkFUSU9OX1NDUkVBTSA9IDIuNTsKdmFyIERFTEFZX1NDUkVBTSA9IDIuNTsKCnZhciBTa3VsbEJvZHkgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9USFJFRSRHcm91cCkgewogIF9pbmhlcml0cyhTa3VsbEJvZHksIF9USFJFRSRHcm91cCk7CgogIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoU2t1bGxCb2R5KTsKCiAgZnVuY3Rpb24gU2t1bGxCb2R5KGdlb21ldHJ5MSwgZ2VvbWV0cnkyKSB7CiAgICB2YXIgX3RoaXM7CgogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFNrdWxsQm9keSk7IC8vIENyZWF0ZSBPYmplY3QzRAoKCiAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpOyAvLyBEZWZpbmUgTWF0ZXJpYWwKCiAgICBfdGhpcy5tYXRlcmlhbCA9IG5ldyBUSFJFRS5SYXdTaGFkZXJNYXRlcmlhbCh7CiAgICAgIHVuaWZvcm1zOiB7CiAgICAgICAgdGltZTogewogICAgICAgICAgdHlwZTogJ2YnLAogICAgICAgICAgdmFsdWU6IDAKICAgICAgICB9LAogICAgICAgIHJvdGF0ZU1hdHJpeDogewogICAgICAgICAgdHlwZTogJ200JywKICAgICAgICAgIHZhbHVlOiBuZXcgVEhSRUUuTWF0cml4NCgpCiAgICAgICAgfSwKICAgICAgICByZW5kZXJPdXRsaW5lOiB7CiAgICAgICAgICB0eXBlOiAnZicsCiAgICAgICAgICB2YWx1ZTogMAogICAgICAgIH0sCiAgICAgICAgYWxwaGE6IHsKICAgICAgICAgIHR5cGU6ICdmJywKICAgICAgICAgIHZhbHVlOiAwCiAgICAgICAgfSwKICAgICAgICBoc3YxOiB7CiAgICAgICAgICB0eXBlOiAndjMnLAogICAgICAgICAgdmFsdWU6IG5ldyBUSFJFRS5WZWN0b3IzKDAuMDksIDAuNywgMC4zKQogICAgICAgIH0KICAgICAgfSwKICAgICAgdmVydGV4U2hhZGVyOiB2cywKICAgICAgZnJhZ21lbnRTaGFkZXI6IGZzLAogICAgICB0cmFuc3BhcmVudDogdHJ1ZSwKICAgICAgZmxhdFNoYWRpbmc6IHRydWUKICAgIH0pOwogICAgX3RoaXMuaGVhZCA9IG5ldyBUSFJFRS5NZXNoKGdlb21ldHJ5MSwgX3RoaXMubWF0ZXJpYWwpOwogICAgX3RoaXMuamF3ID0gbmV3IFRIUkVFLk1lc2goZ2VvbWV0cnkyLCBfdGhpcy5tYXRlcmlhbCk7CgogICAgX3RoaXMuYWRkKF90aGlzLmhlYWQpOwoKICAgIF90aGlzLmFkZChfdGhpcy5qYXcpOwoKICAgIF90aGlzLm5hbWUgPSAnU2t1bGxCb2R5JzsKICAgIF90aGlzLnRpbWVTaG93ID0gMDsKICAgIF90aGlzLnRpbWVIaWRlID0gMDsKICAgIF90aGlzLnRpbWVTY3JlYW0gPSAwOwogICAgX3RoaXMudGltZUxvb3AgPSAtTWF0aEV4LnJhZGlhbnMoOTApOwogICAgX3RoaXMubG9va0V1bGVyID0gbmV3IFRIUkVFLkV1bGVyKCk7CiAgICBfdGhpcy5sb29rViA9IG5ldyBUSFJFRS5WZWN0b3IzKCk7CiAgICBfdGhpcy5sb29rQSA9IG5ldyBUSFJFRS5WZWN0b3IzKCk7CiAgICBfdGhpcy5sb29rQW5jaG9yID0gbmV3IFRIUkVFLlZlY3RvcjMoKTsKICAgIF90aGlzLmlzQWN0aXZlID0gZmFsc2U7CiAgICBfdGhpcy5pc1Nob3duID0gZmFsc2U7CiAgICBfdGhpcy5pc0hpZGRlbiA9IGZhbHNlOwogICAgcmV0dXJuIF90aGlzOwogIH0KCiAgX2NyZWF0ZUNsYXNzKFNrdWxsQm9keSwgW3sKICAgIGtleTogInN0YXJ0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBzdGFydCgpIHsKICAgICAgdGhpcy5pc0FjdGl2ZSA9IHRydWU7CiAgICB9CiAgfSwgewogICAga2V5OiAic2hvdyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gc2hvdygpIHsKICAgICAgdGhpcy50aW1lU2hvdyA9IDA7CiAgICAgIHRoaXMudGltZUhpZGUgPSAwOwogICAgICB0aGlzLmlzU2hvd24gPSB0cnVlOwogICAgICB0aGlzLmlzSGlkZGVuID0gZmFsc2U7CgogICAgICBpZiAodGhpcy50aW1lU2NyZWFtID4gMCkgewogICAgICAgIHRoaXMudGltZVNjcmVhbSA9IERVUkFUSU9OX1NDUkVBTSArIERFTEFZX1NDUkVBTTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogImhpZGUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGhpZGUoKSB7CiAgICAgIHRoaXMuaXNTaG93biA9IGZhbHNlOwogICAgICB0aGlzLmlzSGlkZGVuID0gdHJ1ZTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJsb29rTW91c2UiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGxvb2tNb3VzZShsb29rVikgewogICAgICB0aGlzLmxvb2tBbmNob3IuY29weShsb29rVik7CiAgICB9CiAgfSwgewogICAga2V5OiAidXBkYXRlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGUodGltZSwgY2FtZXJhLCBmbHVjdHVhdGlvbikgewogICAgICBpZiAodGhpcy5pc0FjdGl2ZSA9PT0gZmFsc2UpIHJldHVybjsKICAgICAgdGhpcy5tYXRlcmlhbC51bmlmb3Jtcy50aW1lLnZhbHVlICs9IHRpbWU7IC8vIGZvciB0aGUgc2hvd2luZyBlZmZlY3QuCgogICAgICBpZiAodGhpcy5pc1Nob3duID09PSB0cnVlKSB7CiAgICAgICAgdGhpcy50aW1lU2hvdyArPSB0aW1lOwogICAgICAgIHRoaXMudGltZVNjcmVhbSArPSB0aW1lOwogICAgICB9IC8vIGZvciB0aGUgaGlkaW5nIGVmZmVjdC4KCgogICAgICBpZiAodGhpcy5pc0hpZGRlbiA9PT0gdHJ1ZSkgewogICAgICAgIHRoaXMudGltZUhpZGUgKz0gdGltZTsKICAgICAgfSAvLyBmb3IgdGhlIGxvb3AgYW5pbWF0aW9uCgoKICAgICAgaWYgKHRoaXMudGltZVNjcmVhbSA+PSBERUxBWV9TQ1JFQU0gKyBEVVJBVElPTl9TQ1JFQU0pIHsKICAgICAgICB0aGlzLnRpbWVMb29wICs9IHRpbWU7CiAgICAgIH0gLy8gY2FsY3VsYXRpb24gdGhlIGFscGhhLgoKCiAgICAgIHZhciBhbHBoYVNob3cgPSBlYXNlT3V0Q2lyYyhNYXRoRXguY2xhbXAoKHRoaXMudGltZVNob3cgLSBERUxBWV9TSE9XKSAvIERVUkFUSU9OX1NIT1csIDAuMCwgMS4wKSk7CiAgICAgIHZhciBhbHBoYUhpZGUgPSBlYXNlT3V0Q2lyYyhNYXRoRXguY2xhbXAoKHRoaXMudGltZUhpZGUgLSBERUxBWV9ISURFKSAvIERVUkFUSU9OX0hJREUsIDAuMCwgMS4wKSk7CiAgICAgIHRoaXMubWF0ZXJpYWwudW5pZm9ybXMuYWxwaGEudmFsdWUgPSBhbHBoYVNob3cgKiAoMS4wIC0gYWxwaGFIaWRlKTsgLy8gc2NyZWFtCgogICAgICB2YXIgYWxwaGFTY3JlYW0gPSBlYXNlSW5PdXRDdWJpYyhNYXRoRXguc21vb3Roc3RlcChERUxBWV9TQ1JFQU0sIERFTEFZX1NDUkVBTSArIERVUkFUSU9OX1NDUkVBTSAqIDAuMiwgdGhpcy50aW1lU2NyZWFtKSAqICgxIC0gTWF0aEV4LnNtb290aHN0ZXAoREVMQVlfU0NSRUFNICsgRFVSQVRJT05fU0NSRUFNICogMC4xNSwgREVMQVlfU0NSRUFNICsgRFVSQVRJT05fU0NSRUFNLCB0aGlzLnRpbWVTY3JlYW0pKSk7IC8vIEZyaXN0IHJvdGF0ZQoKICAgICAgdmFyIGFscGhhUmFpc2UgPSBlYXNlT3V0Q2lyYyhNYXRoRXguY2xhbXAoKHRoaXMudGltZVNob3cgLSBERUxBWV9TSE9XKSAvIERVUkFUSU9OX1NIT1cgKiAyLCAwLjAsIDEuMCkpOyAvLyBNb3ZlIHRvIGxvb2sgYXQgYSBtb3VzZSBjb29yZGluYXRlLgogICAgICAvLyByb3RhdGUKCiAgICAgIHRoaXMubG9va0EuY29weSh0aGlzLmxvb2tBbmNob3IpLnN1Yih0aGlzLmxvb2tWKS5kaXZpZGVTY2FsYXIoMjQpOwogICAgICB0aGlzLmxvb2tWLmFkZCh0aGlzLmxvb2tBKTsKICAgICAgdGhpcy5sb29rQXQodGhpcy5sb29rVik7CiAgICAgIHRoaXMubG9va0V1bGVyLmNvcHkodGhpcy5yb3RhdGlvbik7CiAgICAgIHRoaXMucm90YXRpb24uc2V0KHRoaXMubG9va0V1bGVyLnggKyBNYXRoRXgucmFkaWFucyg1ICsgKDEuMCAtIGFscGhhUmFpc2UpICogNzAgKyBhbHBoYVNjcmVhbSAqIC0yMCksIHRoaXMubG9va0V1bGVyLnkgKyBNYXRoRXgucmFkaWFucygwKSwgdGhpcy5sb29rRXVsZXIueiArIE1hdGhFeC5yYWRpYW5zKDApKTsKICAgICAgdGhpcy5tYXRlcmlhbC51bmlmb3Jtcy5yb3RhdGVNYXRyaXgudmFsdWUubWFrZVJvdGF0aW9uRnJvbUV1bGVyKHRoaXMucm90YXRpb24pOwogICAgICB2YXIgc2hha2UgPSBhbHBoYVNjcmVhbSAqIDAuMDM1OwogICAgICB2YXIgc2hha2VSYWRpYW4gPSBNYXRoRXgucmFkaWFucyhNYXRoLnJhbmRvbSgpICogMzYwKTsKICAgICAgdGhpcy5wb3NpdGlvbi5zZXQoTWF0aC5jb3Moc2hha2VSYWRpYW4pICogc2hha2UsIE1hdGguc2luKHNoYWtlUmFkaWFuKSAqIHNoYWtlLCAwKTsgLy8gbG9vcCBhbmltYXRpb24KCiAgICAgIHZhciBsb29wRGVncmVlID0gKE1hdGguc2luKHRoaXMudGltZUxvb3ApICogMC41ICsgMC41KSAqIDg7CiAgICAgIHRoaXMuaGVhZC5yb3RhdGlvbi5zZXQoTWF0aEV4LnJhZGlhbnMoYWxwaGFTY3JlYW0gKiAtMjQgLSBsb29wRGVncmVlKSwgMCwgMCk7CiAgICAgIHRoaXMuamF3LnJvdGF0aW9uLnNldChNYXRoRXgucmFkaWFucyhhbHBoYVNjcmVhbSAqIDI0ICsgbG9vcERlZ3JlZSksIDAsIDApOyAvLyBjYWxjdWxhdGlvbiB0aGUgc2NhbGUuCgogICAgICB2YXIgc2NhbGUgPSBhbHBoYVNob3cgKiAwLjMgKyAwLjcgKyBhbHBoYUhpZGUgKiAwLjEgKyBhbHBoYVNjcmVhbSAqIDAuMjsKICAgICAgdGhpcy5zY2FsZS5zZXQoc2NhbGUsIHNjYWxlLCBzY2FsZSk7IC8vIGZsdWN0dWF0aW9uIG9mIHRoZSBjb2xvcgoKICAgICAgdGhpcy5tYXRlcmlhbC51bmlmb3Jtcy5oc3YxLnZhbHVlLnogPSAwLjMgKyBmbHVjdHVhdGlvbiAqIDAuMzsKICAgIH0KICB9XSk7CgogIHJldHVybiBTa3VsbEJvZHk7Cn0oVEhSRUUuR3JvdXApOwoKZXhwb3J0IHsgU2t1bGxCb2R5IGFzIGRlZmF1bHQgfTs="},{"version":3,"sources":["/Users/uthaya/Downloads/tplh.net-2019-master 3/src/webgl/SkullBody.js"],"names":["DURATION_SHOW","DELAY_SHOW","DURATION_HIDE","DELAY_HIDE","DURATION_SCREAM","DELAY_SCREAM","SkullBody","THREE","Group","uniforms","time","type","value","rotateMatrix","renderOutline","alpha","hsv1","vertexShader","fragmentShader","transparent","flatShading","MathEx","lookV","camera","fluctuation","alphaShow","easeOutCirc","alphaHide","alphaScream","easeInOutCubic","alphaRaise","shake","shakeRadian","Math","loopDegree","scale"],"mappings":";;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,WAAA,EAAA,cAAA,QAAA,WAAA;AACA,OAAA,MAAA,MAAA,gBAAA;AAEA,OAAA,EAAA,MAAA,2BAAA;AACA,OAAA,EAAA,MAAA,2BAAA;AACA,IAAMA,aAAa,GAAnB,CAAA;AACA,IAAMC,UAAU,GAAhB,CAAA;AACA,IAAMC,aAAa,GAAnB,GAAA;AACA,IAAMC,UAAU,GAAhB,GAAA;AACA,IAAMC,eAAe,GAArB,GAAA;AACA,IAAMC,YAAY,GAAlB,GAAA;;IAEqBC,S;;;;;AACnB,WAAA,SAAA,CAAA,SAAA,EAAA,SAAA,EAAkC;AAAA,QAAA,KAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,SAAA,CAAA,CAAA,CAChC;;;AACA,IAAA,KAAA,GAAA,MAAA,CAAA,IAAA,CAFgC,IAEhC,CAAA,CAFgC,CAIhC;;AACA,IAAA,KAAA,CAAA,QAAA,GAAgB,IAAIC,KAAK,CAAT,iBAAA,CAA4B;AAC1CE,MAAAA,QAAQ,EAAE;AACRC,QAAAA,IAAI,EAAE;AACJC,UAAAA,IAAI,EADA,GAAA;AAEJC,UAAAA,KAAK,EAAE;AAFH,SADE;AAKRC,QAAAA,YAAY,EAAE;AACZF,UAAAA,IAAI,EADQ,IAAA;AAEZC,UAAAA,KAAK,EAAE,IAAIL,KAAK,CAAT,OAAA;AAFK,SALN;AASRO,QAAAA,aAAa,EAAE;AACbH,UAAAA,IAAI,EADS,GAAA;AAEbC,UAAAA,KAAK,EAAE;AAFM,SATP;AAaRG,QAAAA,KAAK,EAAE;AACLJ,UAAAA,IAAI,EADC,GAAA;AAELC,UAAAA,KAAK,EAAE;AAFF,SAbC;AAiBRI,QAAAA,IAAI,EAAE;AACJL,UAAAA,IAAI,EADA,IAAA;AAEJC,UAAAA,KAAK,EAAE,IAAIL,KAAK,CAAT,OAAA,CAAA,IAAA,EAAA,GAAA,EAAA,GAAA;AAFH;AAjBE,OADgC;AAuB1CU,MAAAA,YAAY,EAvB8B,EAAA;AAwB1CC,MAAAA,cAAc,EAxB4B,EAAA;AAyB1CC,MAAAA,WAAW,EAzB+B,IAAA;AA0B1CC,MAAAA,WAAW,EAAE;AA1B6B,KAA5B,CAAhB;AA6BA,IAAA,KAAA,CAAA,IAAA,GAAY,IAAIb,KAAK,CAAT,IAAA,CAAA,SAAA,EAA0B,KAAA,CAAtC,QAAY,CAAZ;AACA,IAAA,KAAA,CAAA,GAAA,GAAW,IAAIA,KAAK,CAAT,IAAA,CAAA,SAAA,EAA0B,KAAA,CAArC,QAAW,CAAX;;AAEA,IAAA,KAAA,CAAA,GAAA,CAAS,KAAA,CAAT,IAAA;;AACA,IAAA,KAAA,CAAA,GAAA,CAAS,KAAA,CAAT,GAAA;;AAEA,IAAA,KAAA,CAAA,IAAA,GAAA,WAAA;AACA,IAAA,KAAA,CAAA,QAAA,GAAA,CAAA;AACA,IAAA,KAAA,CAAA,QAAA,GAAA,CAAA;AACA,IAAA,KAAA,CAAA,UAAA,GAAA,CAAA;AACA,IAAA,KAAA,CAAA,QAAA,GAAgB,CAACc,MAAM,CAANA,OAAAA,CAAjB,EAAiBA,CAAjB;AACA,IAAA,KAAA,CAAA,SAAA,GAAiB,IAAId,KAAK,CAA1B,KAAiB,EAAjB;AACA,IAAA,KAAA,CAAA,KAAA,GAAa,IAAIA,KAAK,CAAtB,OAAa,EAAb;AACA,IAAA,KAAA,CAAA,KAAA,GAAa,IAAIA,KAAK,CAAtB,OAAa,EAAb;AACA,IAAA,KAAA,CAAA,UAAA,GAAkB,IAAIA,KAAK,CAA3B,OAAkB,EAAlB;AACA,IAAA,KAAA,CAAA,QAAA,GAAA,KAAA;AACA,IAAA,KAAA,CAAA,OAAA,GAAA,KAAA;AACA,IAAA,KAAA,CAAA,QAAA,GAAA,KAAA;AAnDgC,WAAA,KAAA;AAoDjC;;;;4BACO;AACN,WAAA,QAAA,GAAA,IAAA;AACD;;;2BACM;AACL,WAAA,QAAA,GAAA,CAAA;AACA,WAAA,QAAA,GAAA,CAAA;AACA,WAAA,OAAA,GAAA,IAAA;AACA,WAAA,QAAA,GAAA,KAAA;;AACA,UAAI,KAAA,UAAA,GAAJ,CAAA,EAAyB;AACvB,aAAA,UAAA,GAAkBH,eAAe,GAAjC,YAAA;AACD;AACF;;;2BACM;AACL,WAAA,OAAA,GAAA,KAAA;AACA,WAAA,QAAA,GAAA,IAAA;AACD;;;8BACSkB,K,EAAO;AACf,WAAA,UAAA,CAAA,IAAA,CAAA,KAAA;AACD;;;2BACMZ,I,EAAMa,M,EAAQC,W,EAAa;AAChC,UAAI,KAAA,QAAA,KAAJ,KAAA,EAA6B;AAC7B,WAAA,QAAA,CAAA,QAAA,CAAA,IAAA,CAAA,KAAA,IAFgC,IAEhC,CAFgC,CAIhC;;AACA,UAAI,KAAA,OAAA,KAAJ,IAAA,EAA2B;AACzB,aAAA,QAAA,IAAA,IAAA;AACA,aAAA,UAAA,IAAA,IAAA;AAP8B,OAAA,CAShC;;;AACA,UAAI,KAAA,QAAA,KAAJ,IAAA,EAA4B;AAC1B,aAAA,QAAA,IAAA,IAAA;AAX8B,OAAA,CAahC;;;AACA,UAAI,KAAA,UAAA,IAAmBnB,YAAY,GAAnC,eAAA,EAAuD;AACrD,aAAA,QAAA,IAAA,IAAA;AAf8B,OAAA,CAkBhC;;;AACA,UAAMoB,SAAS,GAAGC,WAAW,CAC3BL,MAAM,CAANA,KAAAA,CAAa,CAAC,KAAA,QAAA,GAAD,UAAA,IAAbA,aAAAA,EAAAA,GAAAA,EADF,GACEA,CAD2B,CAA7B;AAGA,UAAMM,SAAS,GAAGD,WAAW,CAC3BL,MAAM,CAANA,KAAAA,CAAa,CAAC,KAAA,QAAA,GAAD,UAAA,IAAbA,aAAAA,EAAAA,GAAAA,EADF,GACEA,CAD2B,CAA7B;AAGA,WAAA,QAAA,CAAA,QAAA,CAAA,KAAA,CAAA,KAAA,GAAqCI,SAAS,IAAI,MAzBlB,SAyBc,CAA9C,CAzBgC,CA2BhC;;AACA,UAAMG,WAAW,GAAGC,cAAc,CAChCR,MAAM,CAANA,UAAAA,CAAAA,YAAAA,EAEEhB,YAAY,GAAGD,eAAe,GAFhCiB,GAAAA,EAGE,KAHFA,UAAAA,KAKG,IACCA,MAAM,CAANA,UAAAA,CACEhB,YAAY,GAAGD,eAAe,GADhCiB,IAAAA,EAEEhB,YAAY,GAFdgB,eAAAA,EAGE,KAtCwB,UAmC1BA,CANJA,CADgC,CAAlC,CA5BgC,CA0ChC;;AACA,UAAMS,UAAU,GAAGJ,WAAW,CAC5BL,MAAM,CAANA,KAAAA,CAAc,CAAC,KAAA,QAAA,GAAD,UAAA,IAAD,aAAC,GAAdA,CAAAA,EAAAA,GAAAA,EA5C8B,GA4C9BA,CAD4B,CAA9B,CA3CgC,CA+ChC;AACA;;AACA,WAAA,KAAA,CAAA,IAAA,CACQ,KADR,UAAA,EAAA,GAAA,CAEO,KAFP,KAAA,EAAA,YAAA,CAAA,EAAA;AAIA,WAAA,KAAA,CAAA,GAAA,CAAe,KAAf,KAAA;AACA,WAAA,MAAA,CAAY,KAAZ,KAAA;AACA,WAAA,SAAA,CAAA,IAAA,CAAoB,KAApB,QAAA;AACA,WAAA,QAAA,CAAA,GAAA,CACE,KAAA,SAAA,CAAA,CAAA,GACEA,MAAM,CAANA,OAAAA,CAAe,IAAI,CAAC,MAAD,UAAA,IAAJ,EAAA,GAA8BO,WAAW,GAAG,CAF/D,EAEIP,CAFJ,EAGE,KAAA,SAAA,CAAA,CAAA,GAAmBA,MAAM,CAANA,OAAAA,CAHrB,CAGqBA,CAHrB,EAIE,KAAA,SAAA,CAAA,CAAA,GAAmBA,MAAM,CAANA,OAAAA,CAJrB,CAIqBA,CAJrB;AAMA,WAAA,QAAA,CAAA,QAAA,CAAA,YAAA,CAAA,KAAA,CAAA,qBAAA,CACE,KADF,QAAA;AAIA,UAAMU,KAAK,GAAGH,WAAW,GAAzB,KAAA;AACA,UAAMI,WAAW,GAAGX,MAAM,CAANA,OAAAA,CAAeY,IAAI,CAAJA,MAAAA,KAAnC,GAAoBZ,CAApB;AACA,WAAA,QAAA,CAAA,GAAA,CACEY,IAAI,CAAJA,GAAAA,CAAAA,WAAAA,IADF,KAAA,EAEEA,IAAI,CAAJA,GAAAA,CAAAA,WAAAA,IAFF,KAAA,EApEgC,CAoEhC,EApEgC,CA0EhC;;AACA,UAAMC,UAAU,GAAG,CAACD,IAAI,CAAJA,GAAAA,CAAS,KAATA,QAAAA,IAAAA,GAAAA,GAAD,GAAA,IAAnB,CAAA;AAEA,WAAA,IAAA,CAAA,QAAA,CAAA,GAAA,CACEZ,MAAM,CAANA,OAAAA,CAAeO,WAAW,GAAG,CAAdA,EAAAA,GADjB,UACEP,CADF,EAAA,CAAA,EAAA,CAAA;AAKA,WAAA,GAAA,CAAA,QAAA,CAAA,GAAA,CAAsBA,MAAM,CAANA,OAAAA,CAAeO,WAAW,GAAXA,EAAAA,GAArC,UAAsBP,CAAtB,EAAA,CAAA,EAlFgC,CAkFhC,EAlFgC,CAoFhC;;AACA,UAAMc,KAAK,GAAGV,SAAS,GAATA,GAAAA,GAAAA,GAAAA,GAAwBE,SAAS,GAAjCF,GAAAA,GAA0CG,WAAW,GAAnE,GAAA;AACA,WAAA,KAAA,CAAA,GAAA,CAAA,KAAA,EAAA,KAAA,EAtFgC,KAsFhC,EAtFgC,CAwFhC;;AACA,WAAA,QAAA,CAAA,QAAA,CAAA,IAAA,CAAA,KAAA,CAAA,CAAA,GAAsC,MAAMJ,WAAW,GAAvD,GAAA;AACD;;;;EAnKoCjB,KAAK,CAACC,K;;SAAxBF,S","sourcesContent":["import * as THREE from 'three';\nimport { easeOutCirc, easeInOutCubic } from 'easing-js';\nimport MathEx from 'js-util/MathEx';\n\nimport vs from '@/webgl/glsl/SkullBody.vs';\nimport fs from '@/webgl/glsl/SkullBody.fs';\nconst DURATION_SHOW = 5;\nconst DELAY_SHOW = 1;\nconst DURATION_HIDE = 1.2;\nconst DELAY_HIDE = 0.4;\nconst DURATION_SCREAM = 2.5;\nconst DELAY_SCREAM = 2.5;\n\nexport default class SkullBody extends THREE.Group {\n  constructor(geometry1, geometry2) {\n    // Create Object3D\n    super();\n\n    // Define Material\n    this.material = new THREE.RawShaderMaterial({\n      uniforms: {\n        time: {\n          type: 'f',\n          value: 0\n        },\n        rotateMatrix: {\n          type: 'm4',\n          value: new THREE.Matrix4()\n        },\n        renderOutline: {\n          type: 'f',\n          value: 0\n        },\n        alpha: {\n          type: 'f',\n          value: 0\n        },\n        hsv1: {\n          type: 'v3',\n          value: new THREE.Vector3(0.09, 0.7, 0.3)\n        }\n      },\n      vertexShader: vs,\n      fragmentShader: fs,\n      transparent: true,\n      flatShading: true\n    });\n\n    this.head = new THREE.Mesh(geometry1, this.material);\n    this.jaw = new THREE.Mesh(geometry2, this.material);\n\n    this.add(this.head);\n    this.add(this.jaw);\n\n    this.name = 'SkullBody';\n    this.timeShow = 0;\n    this.timeHide = 0;\n    this.timeScream = 0;\n    this.timeLoop = -MathEx.radians(90);\n    this.lookEuler = new THREE.Euler();\n    this.lookV = new THREE.Vector3();\n    this.lookA = new THREE.Vector3();\n    this.lookAnchor = new THREE.Vector3();\n    this.isActive = false;\n    this.isShown = false;\n    this.isHidden = false;\n  }\n  start() {\n    this.isActive = true;\n  }\n  show() {\n    this.timeShow = 0;\n    this.timeHide = 0;\n    this.isShown = true;\n    this.isHidden = false;\n    if (this.timeScream > 0) {\n      this.timeScream = DURATION_SCREAM + DELAY_SCREAM;\n    }\n  }\n  hide() {\n    this.isShown = false;\n    this.isHidden = true;\n  }\n  lookMouse(lookV) {\n    this.lookAnchor.copy(lookV);\n  }\n  update(time, camera, fluctuation) {\n    if (this.isActive === false) return;\n    this.material.uniforms.time.value += time;\n\n    // for the showing effect.\n    if (this.isShown === true) {\n      this.timeShow += time;\n      this.timeScream += time;\n    }\n    // for the hiding effect.\n    if (this.isHidden === true) {\n      this.timeHide += time;\n    }\n    // for the loop animation\n    if (this.timeScream >= DELAY_SCREAM + DURATION_SCREAM) {\n      this.timeLoop += time;\n    }\n\n    // calculation the alpha.\n    const alphaShow = easeOutCirc(\n      MathEx.clamp((this.timeShow - DELAY_SHOW) / DURATION_SHOW, 0.0, 1.0)\n    );\n    const alphaHide = easeOutCirc(\n      MathEx.clamp((this.timeHide - DELAY_HIDE) / DURATION_HIDE, 0.0, 1.0)\n    );\n    this.material.uniforms.alpha.value = alphaShow * (1.0 - alphaHide);\n\n    // scream\n    const alphaScream = easeInOutCubic(\n      MathEx.smoothstep(\n        DELAY_SCREAM,\n        DELAY_SCREAM + DURATION_SCREAM * 0.2,\n        this.timeScream\n      ) *\n        (1 -\n          MathEx.smoothstep(\n            DELAY_SCREAM + DURATION_SCREAM * 0.15,\n            DELAY_SCREAM + DURATION_SCREAM,\n            this.timeScream\n          ))\n    );\n\n    // Frist rotate\n    const alphaRaise = easeOutCirc(\n      MathEx.clamp(((this.timeShow - DELAY_SHOW) / DURATION_SHOW) * 2, 0.0, 1.0)\n    );\n\n    // Move to look at a mouse coordinate.\n    // rotate\n    this.lookA\n      .copy(this.lookAnchor)\n      .sub(this.lookV)\n      .divideScalar(24);\n    this.lookV.add(this.lookA);\n    this.lookAt(this.lookV);\n    this.lookEuler.copy(this.rotation);\n    this.rotation.set(\n      this.lookEuler.x +\n        MathEx.radians(5 + (1.0 - alphaRaise) * 70 + alphaScream * -20),\n      this.lookEuler.y + MathEx.radians(0),\n      this.lookEuler.z + MathEx.radians(0)\n    );\n    this.material.uniforms.rotateMatrix.value.makeRotationFromEuler(\n      this.rotation\n    );\n\n    const shake = alphaScream * 0.035;\n    const shakeRadian = MathEx.radians(Math.random() * 360);\n    this.position.set(\n      Math.cos(shakeRadian) * shake,\n      Math.sin(shakeRadian) * shake,\n      0\n    );\n\n    // loop animation\n    const loopDegree = (Math.sin(this.timeLoop) * 0.5 + 0.5) * 8;\n\n    this.head.rotation.set(\n      MathEx.radians(alphaScream * -24 - loopDegree),\n      0,\n      0\n    );\n    this.jaw.rotation.set(MathEx.radians(alphaScream * 24 + loopDegree), 0, 0);\n\n    // calculation the scale.\n    const scale = alphaShow * 0.3 + 0.7 + alphaHide * 0.1 + alphaScream * 0.2;\n    this.scale.set(scale, scale, scale);\n\n    // fluctuation of the color\n    this.material.uniforms.hsv1.value.z = 0.3 + fluctuation * 0.3;\n  }\n}\n"]}]}